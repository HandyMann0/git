# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.17.2
# ---

# %% [markdown]
# ### Создание новых проектов python с помощью Cookiecutter  
#
# для ускорения выполнения рутинных операций можно использовать Cookiecutter, для автоматизации создания рутинных файлов.
# 1. установка Cookiecutter: pip install cookiecutter  
#
# 2. создание базового проекта(загрузка с github cookiecutter): cookiecutter gh:asweigart/cookiecutter-basicpythonproject   
# PS: после ввода команды задаются вопросы по поводу названия проекта, названия модуля, версии etc.  
#
# ### Установка git  
#
# 1. Узнать версию гит(если она установлена): git --version  
#
# ### Настройка имени пользователя и адреса электронной почты  
#
# 1. изменить имя пользвателя: git config --global user.name "John Doe"  
# 2. изменить адрес электронной почты: git config --global user.email John@Doe.com  
# 3. настроить текущую конфигурацию git config --list  
#
# ### работа с Git  
# 1. создание репозитория git: git init(новый репозиторий)/git clone(уже существующий репозиторий)  
# 2. начать отслеживать файл: git add filename  
# 3. сохранить файлы в коммит: git commit -am "commit_description"  
# 4. получить справку по команде: git help command_name  
#
# ### Как git отслеживает статус файлов
#
# все файлы в рабочем каталоге составляют две группы: отслеживаемые и не отслеживаемые гитом. неотслеживаемые файлы не существуют в рабочей копии. отслеживаемые файлы существуют в одном из трёх состояний:  
# - сохранённом(файл идентичен последнему коммиту)  
# - изменённом(в файл внесены изменения)  
# - индексированном(изменён и будет добавлен в следующем коммите)  
#
# чтобы проверить статус репозитория и состояние файлов используем команду git status  
#
# ### зачем нужно индексирование?  
#
# 1. файлы могут существовать как в изменённом, так и индексированном виде(файл был изменён после того, как он был проиндексирован) 
#
# 2. область индексирования, по большому счёту, представляет собой описание изменений проиндексированных файлов.  
#
# 3. закрепление внесённых изменений: git commit -am command
#
#
# ### Создание репозитория git на вашем компьютере
#
# 1. гит - распределённая ситсема контроля версий. все изменения репозитория хранятся локально на компьютерах=> не нужно подключаться к централизованному серверу по интернету, чтобы сохранить данные.  
#
# 2. Чтобы создать папку гит:
#     md dirname 
#     cd dirname
#     git init  
#
# 3. команда для автоматического вывода статуса репозитория(каждые две секунды): watch "git status"
#
# ### добавление файлов для отслеживания  
#
# 1. т.к. только отслеживаемые файлы можно сохранять и выполнять с ними прочие гит команды, то чтобы их отслеживать нужно выполнить команду(перевод файла в индексируемое состояние): git add filename(отдельный файл)/git add *.extension_name(все файлы с определённым расширением) /git add .(все файлы)  
#
# ### игнорирование файлов в репозитории  
#
# 1. не все файлы стоит отслеживать гитом. к этой категории относятся:
#     - временные файлы  
#     - сгенерированные файлы в процессе работы программы, которые можно сгенерировать заново  
#     - файлы, содержащие конфиденциальные данные  
#
# 2. Чтобы предотвратить попадание таких файлов в гит, нужно создать файл .gitignore, в который нужно вписать файлы, которые не должны индексироваться.  
#
# 3. в .gitignore: * - для шаблонов, # - для комментариев  
#
# 4. .gitignore нужно добавлять в гит.  
#
# 5. чтобы посмотреть все игнорируемые из-за .gitignore настроек: git ls-files --other --ignored --exclude-standard  
#
# ### Сохранение изменений  
#
# 1. для сохранения изменённых файлов: git commit -am "message"(все индексированные файлы)/git commit -am "message" file1.py file2.py(отдельные индексированные файлы)  
#
# 2. не стоит писать обобщённые сообщения в коммите("новый код", "Внесены изменения", etc)  
#
# 3. нельзя сохранять пустые папки в гит, папки автоматически сохраняются, если в них есть индексированные файлы при их сохранении.
#
# 4. Чтобы переписать сообщение последнего коммита: git commit --amend -m "new_message"
#
# ### Просмотр изменений перед коммитом  
#
# 1. чтобы посмотреть различия в коде до коммита: git diff
#
# ### Просмотр изменений в графическом приложении командой git difftool  
#
# 1. Для windows можно использоваьт WinMerge в качестве программы для просмотра изменений
#
# 2. Чтобы настроить гит на использование программы для ппросмотра изменений: git config diff.tool program_name  (на windows WinMerge)
#
# 3. Чтобы гит не запрашивал подтверждение на запуск программы просмотра изменений: git config --global difftool.prompt false
#
# ### Частота сохранения изменений  
#
# 1. не стоит сохранять в гите файлы, содержащие синтаксические ошибки или очевидно неработающий код. Все тесты должны проходить или нужно упомянуть о том, что какие-то тесты не прошли в сообщении.
#
# ### Удаление файлов из репозитория  
#
# 1. чтобы удалить файл из гита: git rm filename(удалить с компьютера и из индекса) / git rm --cached (удалить только из индекса)  
#
# 2. после данной команды нужно не забыть закоммить удаление файла  
#
# 3. Удалять можно только сохранённый в гите неизменённый файл. Чтобы отменить изменения в файле: git reset HEAD filename
#
# ### Переименование и перемещение файлов из репозитория  
#
# 1. не стоит переименовывать или перемещать файлы в обход гита, ибо тогда он решит, что мы удвлить файл со старым названием и создали точно такой же, но с другим названием.
#
# 2. Для переименования/перемещения файла: git mv old_dir_name/old_filename new_dir_name/new_filename  
#
#
# ### Просмотр журнала коммитов  
#
# 1. Вывод всех коммитов: git log (полный вид) / git log --oneline (учесённый вид, только первые 7 из 40 чисел коммита и первая строка коммита) / git log -n number (где number - число последних коммитов, которые нужно показать)
#
# 2. нужно знать хэш коммита, чтобы вернуться к более раннему коммиту  
#
# 3. чтобы посмотреть содержимое файла конкретного коммита: git show hash_number:filename
#
# ### Восстановление старых изменений 
#
# 1. гит позволяет вернуть рабочую копию к более раннему состоянию, если в программе была допущена ошибка или случайно удалили файл.
#
# ### отмена последних коммитов  
#
# 1. Чтобы отменить конкретное количество коммитов: git revert -n HEAD~number (nuber - число коммитов для отмены)
#
# 2. для сохранения этого изменения: git add . , а затем git commit -m"message"
#
# 3. можно отменить отмену, т.к. гит только добавляет информацию с помощью git revert
#
# ### Возврат к конкретнному коммиту из отдельного файла
#
# 1. можно откатить коммит для отдельного файла в рабочей копии: git checkout hash_number -- filename
#
# ### Перезапись истории коммитов
#
# 1. перезаписать конфиденциальные данные, если мы их случайно выложили, сложно, но можно. Либо командой git filter-branchor, либо программой BFG Repo-Cleaner
#
# 2. превентивно можно создать отдельный файл с конфиденциальной информацией и добавить в .gitignore
#
#
# ### отправка существующего репозитория на GitHub
#
# 1. чтобы отправить существующий репозиторий из командной строки: git remote add origin https://github.com/github_user/reponame.git
#
# 2. Все сохранённые изменения на гитхаб можно отправлять с помощью: git push -u origin master (первая отправка) / git push (последующие отправки)
#
# ### Клонирование существующего репозитория GitHub  
#
# 1. Клонировать репозиторий с гитхаба: git clone https://github.com/github_username/reponame.git
